{"version":3,"sources":["reducers/listReducer.js","reducers/searchReducer.js","reducers/rootReducer.js","sagas.js","components/SearchBox.js","components/UserCard.js","components/ReposTable.js","components/App.js","serviceWorker.js","index.js"],"names":["initState","avatarUrl","currentPage","1","rowsPerPage","sort","direction","orderBy","errorMessage","lastPage","parseLastPage","linkHeader","relLast","split","find","rel","match","exec","Number","listReducer","state","action","type","headers","get","page","response","owner","avatar_url","message","users","searchedUser","selectedUser","searchReducer","prefix","items","rootReducer","combineReducers","reposList","usersList","watchSaga","searchUsers","getRepos","all","takeLatest","call","fetchUsersByPrefix","put","fetch","then","res","json","status","catch","error","select","currentUserLogin","fetchRepos","userLogin","statusText","options","SearchBox","useSelector","dispatch","useDispatch","useState","searchValue","setSearchValue","searchTimer","useRef","useEffect","length","clearTimeout","current","setTimeout","Autocomplete","freeSolo","disableClearable","onChange","e","value","trimmedValue","trim","handleSelect","map","user","login","style","marginBottom","renderInput","params","TextField","target","label","margin","variant","InputProps","UserCard","Paper","className","Avatar","width","height","marginRight","alt","src","ReposTable","repos","sortDirection","dateHelper","UTCString","Date","toLocaleDateString","createSortHandler","orderSelector","event","handleChangeSort","Table","TableHead","TableRow","column","index","TableCell","key","TableSortLabel","active","onClick","TableBody","row","id","Link","href","html_url","name","language","created_at","updated_at","pushed_at","TablePagination","rowsPerPageOptions","labelRowsPerPage","labelDisplayedRows","lastRowNumber","from","to","count","component","onChangeRowsPerPage","onChangePage","newPage","App","reposErrorMessage","searchErrorMessage","reposLength","Alert","severity","Boolean","window","location","hostname","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.e2156764.chunk.js","sourcesContent":["const initState = {\r\n\tavatarUrl: null,\r\n\tcurrentPage: 1,\r\n\t1: [],\r\n\trowsPerPage: 5,\r\n\tsort: {\r\n\t\tdirection: 'asc',\r\n\t\torderBy: 'full_name'\t\r\n\t},\r\n\terrorMessage: null,\r\n\tlastPage: 1\r\n}\r\n\r\n// Парсим заголовок Link который вернул GithubAPI\r\n//\r\n// Пример:\r\n// <https://api.github.com/user/2178735/repos?per_page=5&page=2&sort=full_name&direction=asc>;\r\n// rel=\"next\", <https://api.github.com/user/2178735/repos?per_page=5&page=2&sort=full_name&direction=asc>; rel=\"last\"\r\n\r\nconst parseLastPage = (linkHeader) => {\r\n\t\r\n\t// Если заголовка нет - одна страница\r\n\tif (linkHeader == null) {\r\n\t\treturn 1;\r\n\t}\r\n\r\n\tconst relLast = linkHeader.split(',').find(rel => {\r\n\t\treturn (rel.split(';')[1]) === ' rel=\"last\"'\r\n\t});\r\n\r\n\tif (relLast) {\r\n\t\tconst re = /&page=(\\d*)/;\r\n\t\tconst match = re.exec(relLast);\r\n\t\treturn Number(match[1]);\r\n\t} else {\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nconst listReducer = (state = initState, action) => {\r\n\tswitch (action.type) {\r\n\r\n\t\tcase 'FETCH_REPOS_REQUESTED':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tsort: {\r\n\t\t\t\t\torderBy: action.orderBy || state.sort.orderBy,\r\n\t\t\t\t\tdirection: action.direction || state.sort.direction\r\n\t\t\t\t},\r\n\t\t\t\trowsPerPage: action.rowsPerPage || state.rowsPerPage\r\n\t\t\t}\r\n\r\n\t\tcase 'FETCH_REPOS_SUCCEEDED':\r\n\t\t\tconst lastPage = parseLastPage(action.headers.get('Link'));\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.page]: action.response,\r\n\t\t\t\tcurrentPage: action.page || state.currentPage,\r\n\t\t\t\tavatarUrl: action.response[0] ? action.response[0].owner.avatar_url : null,\r\n\t\t\t\terrorMessage: null,\r\n\t\t\t\tlastPage: parseLastPage(action.headers.get('Link')) || state.lastPage\r\n\t\t\t}\r\n\r\n\t\tcase 'FETCH_REPOS_FAILED':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\terrorMessage: action.message\r\n\t\t\t}\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport default listReducer;","const initState = {\r\n\tusers: [],\r\n\tsearchedUser: null,\r\n\tselectedUser: null,\r\n\terrorMessage: null,\r\n}\r\n\r\nconst searchReducer = (state = initState, action) => {\r\n\tswitch (action.type) {\r\n\r\n\t\tcase 'FETCH_USERS_REQUESTED':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tsearchedUser: action.prefix\r\n\t\t\t}\r\n\r\n\t\tcase 'FETCH_USERS_SUCCEEDED':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tusers: action.response.items,\r\n\t\t\t\terrorMessage: null\r\n\t\t\t}\r\n\r\n\t\tcase 'FETCH_USERS_FAILED':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\terrorMessage: action.message\r\n\t\t\t}\r\n\r\n\t\tcase 'SET_SELECTED_USER':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tselectedUser: action.selectedUser \r\n\t\t\t}\r\n\r\n\t\tdefault: \r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport default searchReducer;","import { combineReducers } from 'redux';\r\n\r\nimport listReducer from './listReducer';\r\nimport searchReducer from './searchReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n\treposList: listReducer,\r\n\tusersList: searchReducer\r\n});\r\n\r\nexport default rootReducer;","import { takeLatest, call, put, all, select } from 'redux-saga/effects';\r\n\r\nexport default function* watchSaga() {\r\n\tyield all([\r\n\t\ttakeLatest('FETCH_USERS_REQUESTED', searchUsers),\r\n\t\ttakeLatest('FETCH_REPOS_REQUESTED', getRepos)\r\n\t]);\r\n}\r\n\r\nfunction* searchUsers(action) {\r\n\ttry {\r\n\t\tconst response = yield call(fetchUsersByPrefix, action.prefix);\r\n\t\tyield put({type: 'FETCH_USERS_SUCCEEDED', response});\r\n\t} catch (e) {\r\n\t\tyield put({type: 'FETCH_USERS_FAILED', message: e.message})\r\n\t}\r\n}\r\n\r\nfunction fetchUsersByPrefix(prefix) {\r\n\treturn fetch(`https://api.github.com/search/users?q=${prefix}`).then(res =>\r\n\t\tres.json().then(json => {\r\n\t\t\tif (res.status >= 200 && res.status <= 300) {\r\n\t\t\t\treturn json;\r\n\t\t\t} else {\r\n\t\t\t\tthrow res;\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(error => {throw error})\r\n\t);\r\n}\r\n\r\nfunction* getRepos(action) {\r\n\ttry {\r\n\t\tconst currentUserLogin = yield select(state => state.usersList.searchedUser);\r\n\t\tconst currentPage = yield select(state => state.reposList.currentPage);\r\n\t\tconst rowsPerPage = yield select(state => state.reposList.rowsPerPage);\r\n\t\tconst orderBy = yield select(state => state.reposList.sort.orderBy);\r\n\t\tconst direction = yield select(state => state.reposList.sort.direction);\r\n\r\n\t\tconst response = yield call(fetchRepos, {\r\n\t\t\tuserLogin: action.userLogin || currentUserLogin,\r\n\t\t\tpage: action.page || currentPage,\r\n\t\t\trowsPerPage: action.rowsPerPage || rowsPerPage,\r\n\t\t\torderBy: action.orderBy || orderBy,\r\n\t\t\tdirection: action.direction || direction\r\n\t\t});\r\n\t\tyield put({\r\n\t\t\ttype: 'FETCH_REPOS_SUCCEEDED',\r\n\t\t\tresponse: response.json,\r\n\t\t\theaders: response.headers,\r\n\t\t\tpage: action.page || currentPage\r\n\t\t});\r\n\t\tif (action.userLogin) {\r\n\t\t\tyield put({type: 'SET_SELECTED_USER', selectedUser: action.userLogin});\r\n\t\t}\r\n\t} catch (e) {\r\n\t\tyield put({type: 'FETCH_REPOS_FAILED', message: e.statusText});\r\n\t}\r\n}\r\n\r\nfunction fetchRepos(options) {\r\n\tconst { userLogin, page, rowsPerPage, orderBy, direction } = options;\r\n\treturn fetch(`https://api.github.com/users/${userLogin}/repos?per_page=${rowsPerPage}`\r\n\t\t\t\t + `&page=${page}&sort=${orderBy}&direction=${direction}`)\r\n\t\t.then(res => {\r\n\t\t\treturn res.json().then(json => {\r\n\t\t\t\tif (res.status >= 200 && res.status <= 300) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\theaders: res.headers,\r\n\t\t\t\t\t\tjson: json\r\n\t\t\t\t\t};\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow res;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t})\r\n\t\t.catch(error => {throw error});\r\n}","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nconst SearchBox = () => {\r\n\tconst users = useSelector(state => state.usersList.users);\r\n\tconst dispatch = useDispatch();\r\n\tlet [searchValue, setSearchValue] = useState('');\r\n\t\r\n\tconst DELAY = 600;\r\n\tconst MIN_SEARCH_LENGTH = 3;\r\n\tconst searchTimer = useRef(false);\r\n\r\n\tconst handleChange = (value) => {\r\n\t\tsetSearchValue(value.trim());\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (searchValue.length >= MIN_SEARCH_LENGTH) {\r\n\t\t\tclearTimeout(searchTimer.current);\r\n\t\t\tsearchTimer.current = setTimeout(\r\n\t\t\t\t() => dispatch({type: 'FETCH_USERS_REQUESTED', prefix: searchValue}),\r\n\t\t\t\tDELAY\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn () => {\r\n\t\t\tclearTimeout(searchTimer.current)\r\n\t\t}\r\n\t}, [searchValue, dispatch])\r\n\r\n\tconst handleSelect = (value) => {\r\n\t\tlet trimmedValue = value.trim();\r\n\r\n\t\tif (trimmedValue.length >= MIN_SEARCH_LENGTH) {\r\n\t\t\tsetSearchValue(trimmedValue);\r\n\t\t\tdispatch({type: 'FETCH_REPOS_REQUESTED', userLogin: trimmedValue});\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<Autocomplete\r\n\t        freeSolo\r\n\t        disableClearable\r\n\t        onChange={(e, value) => {handleSelect(value)}}\r\n\t        options={users.map(user => user.login)}\r\n\t        style={{marginBottom: '9px'}}\r\n\t        renderInput={params => (\r\n\t          <TextField\r\n\t            {...params}\r\n\t            onChange={e => handleChange(e.target.value)}\r\n\t            label=\"Кого ищем?\"\r\n\t            margin=\"normal\"\r\n\t            variant=\"outlined\"\r\n\t            InputProps={{ ...params.InputProps, type: 'search' }}\r\n\t          />\r\n\t        )}\r\n\t      />\r\n\t)\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport './UserCard/UserCard.scss';\r\n\r\nconst UserCard = () => {\r\n\tconst userLogin = useSelector(state => state.usersList.selectedUser);\r\n\tconst avatarUrl = useSelector(state => state.reposList.avatarUrl);\r\n\r\n\treturn (\r\n\t\t<Paper className='UserCard'>\r\n\t\t\t<Avatar\r\n\t\t\t\tstyle={{width: '80px', height: '80px', marginRight: '16px'}}\r\n\t\t\t\talt={userLogin}\r\n\t\t\t\tsrc={avatarUrl} />\r\n\t\t\t{userLogin}\r\n\t\t</Paper>\r\n\t);\r\n}\r\n\r\nexport default UserCard;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Link from '@material-ui/core/Link';\r\n\r\nconst ReposTable = () => {\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst currentPage = useSelector(state => state.reposList.currentPage);\r\n\tconst repos = useSelector(state => state.reposList[currentPage]);\r\n\tconst rowsPerPage = useSelector(state => state.reposList.rowsPerPage);\r\n\tconst sortDirection = useSelector(state => state.reposList.sort.direction);\r\n\tconst orderBy = useSelector(state => state.reposList.sort.orderBy);\r\n\tconst lastPage = useSelector(state => state.reposList.lastPage);\r\n\r\n\tconst dateHelper = (UTCString) => (new Date(UTCString)).toLocaleDateString();\r\n\r\n\tconst handleChangeRowsPerPage = (event) => {\r\n\t\tdispatch({\r\n\t\t\ttype: 'FETCH_REPOS_REQUESTED',\r\n\t\t\trowsPerPage: Number(event.target.value),\r\n\t\t\tpage: 1\r\n\t\t});\r\n\t}\r\n\r\n\tconst handleChangePage = (event, newPage) => {\r\n\t\tdispatch({type: 'FETCH_REPOS_REQUESTED', page: newPage + 1});\r\n\t}\r\n\r\n\tconst handleChangeSort = (event, orderSelector) => {\r\n\t\tlet direction;\r\n\t\tif (orderSelector === orderBy) {\r\n\t\t\tif (sortDirection === 'asc') {\r\n\t\t\t\tdirection = 'desc';\r\n\t\t\t} else {\r\n\t\t\t\tdirection = 'asc';\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tdirection = 'asc';\r\n\t\t}\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: 'FETCH_REPOS_REQUESTED',\r\n\t\t\torderBy: orderSelector,\r\n\t\t\tdirection: direction\r\n\t\t});\r\n\t}\r\n\r\n\tconst createSortHandler = orderSelector => event => {\r\n\t\thandleChangeSort(event, orderSelector);\r\n\t}\r\n\r\n\tconst headColumns = [\r\n\t\t{label: 'Name', orderSelector: 'full_name'},\r\n\t\t{label: 'Language'},\r\n\t\t{label: 'Created at', orderSelector: 'created'},\r\n\t\t{label: 'Updated at', orderSelector: 'updated'},\r\n\t\t{label: 'Pushed at', orderSelector: 'pushed'},\r\n\t]\r\n\r\n\tconst displayedLabelHelper = ({from, to, count}) => {\r\n\t\tlet lastRowNumber;\r\n\r\n\t\tif (currentPage !== lastPage) {\r\n\t\t\tlastRowNumber = to;\r\n\t\t} else {\r\n\t\t\tlastRowNumber = from + repos.length - 1;\r\n\t\t}\r\n\t\treturn `${currentPage} стр. (${from}-${lastRowNumber})`\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Paper>\r\n\t\t\t<Table>\r\n\t\t\t\t<TableHead>\r\n\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t{headColumns.map((column, index) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<TableCell key={index}>\r\n\t\t\t\t\t\t\t\t{column.orderSelector ? (\r\n\t\t\t\t\t\t\t\t\t<TableSortLabel\r\n\t\t\t\t\t\t\t\t\t\tactive={orderBy === column.orderSelector}\r\n\t\t\t\t\t\t\t\t\t\tonClick={createSortHandler(column.orderSelector)}\r\n\t\t\t\t\t\t\t\t\t\tdirection={sortDirection}>\r\n\t\t\t\t\t\t\t\t\t\t{column.label}\r\n\t\t\t\t\t\t\t\t\t</TableSortLabel>\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\tcolumn.label\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})}\r\n\t\t\t\t\t</TableRow>\r\n\t\t\t\t</TableHead>\r\n\t\t\t\t<TableBody>\r\n\t\t\t\t\t{repos.map((row) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<TableRow key={row.id}>\r\n\t\t\t\t\t\t\t\t<TableCell>\r\n\t\t\t\t\t\t\t\t\t<Link href={row.html_url} target=\"_blank\">{row.name}</Link>\r\n\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t<TableCell>{row.language}</TableCell>\r\n\t\t\t\t\t\t\t\t<TableCell>{dateHelper(row.created_at)}</TableCell>\r\n\t\t\t\t\t\t\t\t<TableCell>{dateHelper(row.updated_at)}</TableCell>\r\n\t\t\t\t\t\t\t\t<TableCell>{dateHelper(row.pushed_at)}</TableCell>\r\n\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})}\r\n\t\t\t\t</TableBody>\r\n\t\t\t</Table>\r\n\t\t\t<TablePagination\r\n\t          rowsPerPageOptions={[5, 10, 25]}\r\n\t          labelRowsPerPage=\"Репозиториев на странице\"\r\n\t          labelDisplayedRows={displayedLabelHelper}\r\n\t          component=\"div\"\r\n\t          count={rowsPerPage * lastPage}\r\n\t          rowsPerPage={rowsPerPage}\r\n\t          page={currentPage - 1}\r\n\t          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n\t          onChangePage={handleChangePage}\r\n\t        />\r\n        </Paper>\r\n\t);\r\n}\r\n\r\nexport default ReposTable;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './App/App.scss';\nimport SearchBox from './SearchBox';\nimport UserCard from './UserCard';\nimport ReposTable from './ReposTable';\nimport Alert from '@material-ui/lab/Alert';\n\nfunction App() {\n\tconst reposErrorMessage = useSelector(state => state.reposList.errorMessage);\n\tconst searchErrorMessage = useSelector(state => state.usersList.errorMessage);\n\tconst reposLength = useSelector(state => state.reposList[1].length);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<SearchBox />\n\t\t\t{searchErrorMessage ? (\n\t\t\t\t<Alert severity=\"error\">{searchErrorMessage}</Alert>\n\t\t\t) : (\n\t\t\t\treposErrorMessage ? (\n\t\t\t\t\t<Alert severity=\"error\">\n\t\t\t\t\t\t{(reposErrorMessage === 'Not Found') ? 'Пользователь не найден' : reposErrorMessage}\n\t\t\t\t\t</Alert>\n\t\t\t\t) : (\n\t\t\t\t\t(reposLength === 0) ? (\n\t\t\t\t\t\t<Alert severity=\"info\">Тут нет репозиториев Q( ' - ' Q)</Alert>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<UserCard />\n\t\t\t\t\t\t\t<ReposTable />\n\t\t\t\t\t\t</>\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducers/rootReducer';\nimport watchSaga from './sagas';\n\nimport createSagaMiddleware from 'redux-saga';\n\n\nimport './index.css';\nimport App from './components/App.js';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n\trootReducer,\n\tapplyMiddleware(sagaMiddleware)\n);\n\nsagaMiddleware.run(watchSaga);\n\nrender(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}